{"mappings":"ACGA,MAAM,EAAO,ICDb,MACE,YACE,EAAe,CACb,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,CACD,CACA,IAAI,CAAC,YAAY,CAAG,EACpB,IAAI,CAAC,KAAK,CAAG,EAAa,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EAC/C,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,MAChB,CACA,UAAW,CACT,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,OAGF,IAAI,EAAQ,CAAA,EACN,EAAW,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAE1C,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IAAK,CAC1C,IAAI,EAAM,IAAI,CAAC,KAAK,CAAC,EAAE,CAEvB,EAAM,IAAI,CAAC,KAAK,CAAC,GACjB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,CAClB,CAII,IAFa,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,GAGxC,CAAA,EAAQ,CAAA,CADV,EAII,IACF,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,SAAS,GAElB,CACA,WAAY,CACV,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,OAGF,IAAI,EAAQ,CAAA,EACN,EAAW,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAE1C,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IAAK,CAC1C,IAAI,EAAM,IAAI,CAAC,KAAK,CAAC,EAAE,CAEvB,EAAI,OAAO,GAEX,EAAM,IAAI,CAAC,KAAK,CAAC,GACjB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAG,EAAI,OAAO,EAC7B,CAII,IAFa,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,GAGxC,CAAA,EAAQ,CAAA,CADV,EAII,IACF,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,SAAS,GAElB,CACA,QAAS,CACP,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,OAGF,IAAI,EAAQ,CAAA,EACN,EAAW,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAE1C,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IAAK,CAC1C,IAAI,EAAM,CACR,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CACjB,CAED,EAAM,IAAI,CAAC,KAAK,CAAC,GACjB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CACzB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CACzB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CACzB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,AAC3B,CAII,IAFa,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,GAGxC,CAAA,EAAQ,CAAA,CADV,EAII,IACF,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,SAAS,GAElB,CACA,UAAW,CACT,GAAI,AAAgB,YAAhB,IAAI,CAAC,MAAM,CACb,OAGF,IAAI,EAAQ,CAAA,EACN,EAAW,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,EAE1C,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IAAK,CAC1C,IAAI,EAAM,CACR,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAChB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CACjB,CAED,EAAI,OAAO,GAGX,AADA,CAAA,EAAM,IAAI,CAAC,KAAK,CAAC,EAAjB,EACI,OAAO,GACX,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CACzB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CACzB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,CACzB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,CAAG,CAAG,CAAC,EAAE,AAC3B,CAII,IAFa,KAAK,SAAS,CAAC,IAAI,CAAC,KAAK,GAGxC,CAAA,EAAQ,CAAA,CADV,EAII,IACF,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,QAAQ,GACb,IAAI,CAAC,SAAS,GAElB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAEA,OAAQ,CACN,IAAI,CAAC,aAAa,GAClB,IAAI,CAAC,aAAa,GAElB,IAAI,CAAC,MAAM,CAAG,SAChB,CAEA,SAAU,CACR,IAAI,CAAC,KAAK,CAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,AAAC,GAAQ,IAAI,EAAI,EACpD,IAAI,CAAC,KAAK,CAAG,EACb,IAAI,CAAC,MAAM,CAAG,MAChB,CAEA,eAAgB,CACd,IAAM,EAAa,IAAI,CAAC,aAAa,GAErC,GAAI,AAAsB,IAAtB,EAAW,MAAM,CACnB,OAGF,IAAM,EAAY,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,EAAW,MAAM,EACxD,CAAC,EAAK,EAAI,CAAG,CAAU,CAAC,EAAU,AAExC,CAAA,IAAI,CAAC,KAAK,CAAC,EAAI,CAAC,EAAI,CAAG,KAAK,MAAM,GAAK,GAAM,EAAI,CACnD,CAEA,eAAgB,CACd,IAAM,EAAa,EAAE,CAUrB,OARA,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,EAAK,KACvB,IAAK,IAAI,EAAY,EAAG,EAAY,EAAI,MAAM,CAAE,IACvB,IAAnB,CAAG,CAAC,EAAU,EAChB,EAAW,IAAI,CAAC,CAAC,EAAU,EAAU,CAG3C,GAEO,CACT,CAEA,WAAW,CAAG,CAAE,CACd,OAAO,EAAI,MAAM,CAAC,AAAC,GAAQ,AAAQ,IAAR,EAC7B,CAEA,MAAM,CAAG,CAAE,CACT,IAAI,EAAS,IAAI,CAAC,UAAU,CAAC,GAE7B,IAAK,IAAI,EAAI,EAAG,EAAI,EAAO,MAAM,CAAG,EAAG,IACjC,CAAM,CAAC,EAAE,GAAK,CAAM,CAAC,EAAI,EAAE,GAC7B,CAAM,CAAC,EAAE,EAAI,EACb,CAAM,CAAC,EAAI,EAAE,CAAG,EAChB,IAAI,CAAC,KAAK,EAAI,CAAM,CAAC,EAAE,EAM3B,IAFA,EAAS,IAAI,CAAC,UAAU,CAAC,GAElB,EAAO,MAAM,CAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EACtC,EAAO,IAAI,CAAC,GAGd,OAAO,CACT,CAEA,UAAW,CACT,IAAK,IAAM,KAAO,IAAI,CAAC,KAAK,CAC1B,GAAI,EAAI,QAAQ,CAAC,MAGf,OAFA,IAAI,CAAC,MAAM,CAAG,MAEP,CAAA,EAIX,MAAO,CAAA,CACT,CAEA,WAAY,CACV,IAAI,CAAA,IAAI,CAAC,aAAa,GAAG,MAAM,CAAG,CAAA,GAIlC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAE,IACrC,IAAK,IAAI,EAAI,EAAG,EAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,MAAM,CAAG,EAAG,IAC5C,GAAI,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAI,EAAE,EAK3C,EAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAG,GACxB,IAAI,CAAC,KAAK,CAAC,EAAE,CAAC,EAAE,GAAK,IAAI,CAAC,KAAK,CAAC,EAAI,EAAE,CAAC,EAAE,CALzC,MAYN,CAAA,IAAI,CAAC,MAAM,CAAG,OAChB,CACF,ED3PM,EAAS,SAAS,aAAa,CAAC,UAChC,EAAQ,SAAS,aAAa,CAAC,eAE/B,EAAe,SAAS,aAAa,CAAC,kBACtC,EAAa,SAAS,aAAa,CAAC,gBACpC,EAAc,SAAS,aAAa,CAAC,iBAoD3C,SAAS,IACP,IAAM,EAAQ,EAAK,QAAQ,GACrB,EAAO,SAAS,gBAAgB,CAAC,aAEvC,CAAA,EAAM,WAAW,CAAG,GACpB,EAAM,WAAW,CAAG,EAAK,QAAQ,GAEjC,EAAK,OAAO,CAAC,CAAC,EAAK,KAGjB,AAFc,EAAI,gBAAgB,CAAC,eAE7B,OAAO,CAAC,CAAC,EAAM,KACnB,IAAM,EAAQ,CAAK,CAAC,EAAS,CAAC,EAAU,AAExC,CAAA,EAAK,WAAW,CAAG,AAAU,IAAV,EAAc,GAAK,EACtC,EAAK,SAAS,CAAG,aAEH,IAAV,GACF,EAAK,SAAS,CAAC,GAAG,CAAC,CAAC,YAAY,EAAE,EAAM,CAAC,CAE7C,EACF,EACF,CAvEA,EAAO,gBAAgB,CAAC,QAAS,AAAC,IAC5B,EAAO,SAAS,CAAC,QAAQ,CAAC,UAC5B,EAAK,KAAK,GACV,IAEA,EAAa,SAAS,CAAC,GAAG,CAAC,UAC3B,EAAO,SAAS,CAAC,MAAM,CAAC,SACxB,EAAO,WAAW,CAAG,UACrB,EAAO,SAAS,CAAC,GAAG,CAAC,aAErB,EAAK,OAAO,GACZ,IAEA,EAAa,SAAS,CAAC,MAAM,CAAC,UAC9B,EAAO,SAAS,CAAC,MAAM,CAAC,WACxB,EAAO,WAAW,CAAG,QACrB,EAAO,SAAS,CAAC,GAAG,CAAC,SAEzB,GAEA,SAAS,gBAAgB,CAAC,UAAW,AAAC,IACpC,OAAQ,EAAE,IAAI,EACZ,IAAK,OACL,IAAK,YACH,EAAK,QAAQ,GACb,KAEF,KAAK,OACL,IAAK,UACH,EAAK,MAAM,GACX,KAEF,KAAK,OACL,IAAK,aACH,EAAK,SAAS,GACd,KAEF,KAAK,OACL,IAAK,YACH,EAAK,QAAQ,EAKjB,CAEA,IA4BI,AAAqB,SAArB,EAAK,SAAS,IAChB,EAAY,SAAS,CAAC,MAAM,CAAC,UAC7B,EAAW,SAAS,CAAC,GAAG,CAAC,UACzB,EAAa,SAAS,CAAC,GAAG,CAAC,WACG,QAArB,EAAK,SAAS,KACvB,EAAW,SAAS,CAAC,MAAM,CAAC,UAC5B,EAAY,SAAS,CAAC,GAAG,CAAC,UAC1B,EAAa,SAAS,CAAC,GAAG,CAAC,UAjC/B","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    moveLeft() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        const oldState = JSON.stringify(this.state);\n        for(let r = 0; r < this.state.length; r++){\n            let row = this.state[r];\n            row = this.slide(row);\n            this.state[r] = row;\n        }\n        const newState = JSON.stringify(this.state);\n        if (oldState !== newState) moved = true;\n        if (moved) {\n            this.addRandomTile();\n            this.checkWin();\n            this.checkLose();\n        }\n    }\n    moveRight() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        const oldState = JSON.stringify(this.state);\n        for(let r = 0; r < this.state.length; r++){\n            let row = this.state[r];\n            row.reverse();\n            row = this.slide(row);\n            this.state[r] = row.reverse();\n        }\n        const newState = JSON.stringify(this.state);\n        if (oldState !== newState) moved = true;\n        if (moved) {\n            this.addRandomTile();\n            this.checkWin();\n            this.checkLose();\n        }\n    }\n    moveUp() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        const oldState = JSON.stringify(this.state);\n        for(let c = 0; c < this.state.length; c++){\n            let row = [\n                this.state[0][c],\n                this.state[1][c],\n                this.state[2][c],\n                this.state[3][c]\n            ];\n            row = this.slide(row);\n            this.state[0][c] = row[0];\n            this.state[1][c] = row[1];\n            this.state[2][c] = row[2];\n            this.state[3][c] = row[3];\n        }\n        const newState = JSON.stringify(this.state);\n        if (oldState !== newState) moved = true;\n        if (moved) {\n            this.addRandomTile();\n            this.checkWin();\n            this.checkLose();\n        }\n    }\n    moveDown() {\n        if (this.status !== \"playing\") return;\n        let moved = false;\n        const oldState = JSON.stringify(this.state);\n        for(let c = 0; c < this.state.length; c++){\n            let row = [\n                this.state[0][c],\n                this.state[1][c],\n                this.state[2][c],\n                this.state[3][c]\n            ];\n            row.reverse();\n            row = this.slide(row);\n            row.reverse();\n            this.state[0][c] = row[0];\n            this.state[1][c] = row[1];\n            this.state[2][c] = row[2];\n            this.state[3][c] = row[3];\n        }\n        const newState = JSON.stringify(this.state);\n        if (oldState !== newState) moved = true;\n        if (moved) {\n            this.addRandomTile();\n            this.checkWin();\n            this.checkLose();\n        }\n    }\n    getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.state;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.addRandomTile();\n        this.addRandomTile();\n        this.status = \"playing\";\n    }\n    restart() {\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.score = 0;\n        this.status = \"idle\";\n    }\n    addRandomTile() {\n        const emptyCells = this.getEmptyCells();\n        if (emptyCells.length === 0) return;\n        const cellIndex = Math.floor(Math.random() * emptyCells.length);\n        const [row, col] = emptyCells[cellIndex];\n        this.state[row][col] = Math.random() > 0.9 ? 4 : 2;\n    }\n    getEmptyCells() {\n        const emptyCells = [];\n        this.state.forEach((row, rowIndex)=>{\n            for(let cellIndex = 0; cellIndex < row.length; cellIndex++)if (row[cellIndex] === 0) emptyCells.push([\n                rowIndex,\n                cellIndex\n            ]);\n        });\n        return emptyCells;\n    }\n    filterZero(row) {\n        return row.filter((num)=>num !== 0);\n    }\n    slide(row) {\n        let newRow = this.filterZero(row);\n        for(let i = 0; i < newRow.length - 1; i++)if (newRow[i] === newRow[i + 1]) {\n            newRow[i] *= 2;\n            newRow[i + 1] = 0;\n            this.score += newRow[i];\n        }\n        newRow = this.filterZero(newRow);\n        while(newRow.length < this.state.length)newRow.push(0);\n        return newRow;\n    }\n    checkWin() {\n        for (const row of this.state)if (row.includes(2048)) {\n            this.status = \"win\";\n            return true;\n        }\n        return false;\n    }\n    checkLose() {\n        if (this.getEmptyCells().length > 0) return;\n        for(let r = 0; r < this.state.length; r++)for(let c = 0; c < this.state[r].length - 1; c++){\n            if (this.state[r][c] === this.state[r][c + 1]) return;\n            if (r < this.state.length - 1 && this.state[r][c] === this.state[r + 1][c]) return;\n        }\n        this.status = \"lose\";\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$score = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\n$09e991522ca7e64e$var$button.addEventListener(\"click\", (e)=>{\n    if ($09e991522ca7e64e$var$button.classList.contains(\"start\")) {\n        $09e991522ca7e64e$var$game.start();\n        $09e991522ca7e64e$var$renderGameBoard();\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$button.classList.remove(\"start\");\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$button.classList.add(\"restart\");\n    } else {\n        $09e991522ca7e64e$var$game.restart();\n        $09e991522ca7e64e$var$renderGameBoard();\n        $09e991522ca7e64e$var$messageStart.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$button.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$button.classList.add(\"start\");\n    }\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    switch(e.code){\n        case \"KeyA\":\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"KeyW\":\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"KeyD\":\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"KeyS\":\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n        default:\n            break;\n    }\n    $09e991522ca7e64e$var$renderGameBoard();\n    $09e991522ca7e64e$var$checkGameOver();\n});\nfunction $09e991522ca7e64e$var$renderGameBoard() {\n    const state = $09e991522ca7e64e$var$game.getState();\n    const rows = document.querySelectorAll(\".field-row\");\n    $09e991522ca7e64e$var$score.textContent = \"\";\n    $09e991522ca7e64e$var$score.textContent = $09e991522ca7e64e$var$game.getScore();\n    rows.forEach((row, rowIndex)=>{\n        const cells = row.querySelectorAll(\".field-cell\");\n        cells.forEach((cell, cellIndex)=>{\n            const value = state[rowIndex][cellIndex];\n            cell.textContent = value === 0 ? \"\" : value;\n            cell.className = \"field-cell\";\n            if (value !== 0) cell.classList.add(`field-cell--${value}`);\n        });\n    });\n}\nfunction $09e991522ca7e64e$var$checkGameOver() {\n    if ($09e991522ca7e64e$var$game.getStatus() === \"lose\") {\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    } else if ($09e991522ca7e64e$var$game.getStatus() === \"win\") {\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n        $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    }\n}\n\n\n//# sourceMappingURL=index.953e0ed4.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('.start');\nconst score = document.querySelector('.game-score');\n\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\n\nbutton.addEventListener('click', (e) => {\n  if (button.classList.contains('start')) {\n    game.start();\n    renderGameBoard();\n\n    messageStart.classList.add('hidden');\n    button.classList.remove('start');\n    button.textContent = 'Restart';\n    button.classList.add('restart');\n  } else {\n    game.restart();\n    renderGameBoard();\n\n    messageStart.classList.remove('hidden');\n    button.classList.remove('restart');\n    button.textContent = 'Start';\n    button.classList.add('start');\n  }\n});\n\ndocument.addEventListener('keydown', (e) => {\n  switch (e.code) {\n    case 'KeyA':\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n\n    case 'KeyW':\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n\n    case 'KeyD':\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n\n    case 'KeyS':\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n\n    default:\n      break;\n  }\n\n  renderGameBoard();\n  checkGameOver();\n});\n\nfunction renderGameBoard() {\n  const state = game.getState();\n  const rows = document.querySelectorAll('.field-row');\n\n  score.textContent = '';\n  score.textContent = game.getScore();\n\n  rows.forEach((row, rowIndex) => {\n    const cells = row.querySelectorAll('.field-cell');\n\n    cells.forEach((cell, cellIndex) => {\n      const value = state[rowIndex][cellIndex];\n\n      cell.textContent = value === 0 ? '' : value;\n      cell.className = 'field-cell';\n\n      if (value !== 0) {\n        cell.classList.add(`field-cell--${value}`);\n      }\n    });\n  });\n}\n\nfunction checkGameOver() {\n  if (game.getStatus() === 'lose') {\n    messageLose.classList.remove('hidden');\n    messageWin.classList.add('hidden');\n    messageStart.classList.add('hidden');\n  } else if (game.getStatus() === 'win') {\n    messageWin.classList.remove('hidden');\n    messageLose.classList.add('hidden');\n    messageStart.classList.add('hidden');\n  }\n}\n","'use strict';\n\nclass Game {\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n  moveLeft() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    const oldState = JSON.stringify(this.state);\n\n    for (let r = 0; r < this.state.length; r++) {\n      let row = this.state[r];\n\n      row = this.slide(row);\n      this.state[r] = row;\n    }\n\n    const newState = JSON.stringify(this.state);\n\n    if (oldState !== newState) {\n      moved = true;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkWin();\n      this.checkLose();\n    }\n  }\n  moveRight() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    const oldState = JSON.stringify(this.state);\n\n    for (let r = 0; r < this.state.length; r++) {\n      let row = this.state[r];\n\n      row.reverse();\n\n      row = this.slide(row);\n      this.state[r] = row.reverse();\n    }\n\n    const newState = JSON.stringify(this.state);\n\n    if (oldState !== newState) {\n      moved = true;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkWin();\n      this.checkLose();\n    }\n  }\n  moveUp() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    const oldState = JSON.stringify(this.state);\n\n    for (let c = 0; c < this.state.length; c++) {\n      let row = [\n        this.state[0][c],\n        this.state[1][c],\n        this.state[2][c],\n        this.state[3][c],\n      ];\n\n      row = this.slide(row);\n      this.state[0][c] = row[0];\n      this.state[1][c] = row[1];\n      this.state[2][c] = row[2];\n      this.state[3][c] = row[3];\n    }\n\n    const newState = JSON.stringify(this.state);\n\n    if (oldState !== newState) {\n      moved = true;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkWin();\n      this.checkLose();\n    }\n  }\n  moveDown() {\n    if (this.status !== 'playing') {\n      return;\n    }\n\n    let moved = false;\n    const oldState = JSON.stringify(this.state);\n\n    for (let c = 0; c < this.state.length; c++) {\n      let row = [\n        this.state[0][c],\n        this.state[1][c],\n        this.state[2][c],\n        this.state[3][c],\n      ];\n\n      row.reverse();\n\n      row = this.slide(row);\n      row.reverse();\n      this.state[0][c] = row[0];\n      this.state[1][c] = row[1];\n      this.state[2][c] = row[2];\n      this.state[3][c] = row[3];\n    }\n\n    const newState = JSON.stringify(this.state);\n\n    if (oldState !== newState) {\n      moved = true;\n    }\n\n    if (moved) {\n      this.addRandomTile();\n      this.checkWin();\n      this.checkLose();\n    }\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.addRandomTile();\n    this.addRandomTile();\n\n    this.status = 'playing';\n  }\n\n  restart() {\n    this.state = this.initialState.map((row) => [...row]);\n    this.score = 0;\n    this.status = 'idle';\n  }\n\n  addRandomTile() {\n    const emptyCells = this.getEmptyCells();\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const cellIndex = Math.floor(Math.random() * emptyCells.length);\n    const [row, col] = emptyCells[cellIndex];\n\n    this.state[row][col] = Math.random() > 0.9 ? 4 : 2;\n  }\n\n  getEmptyCells() {\n    const emptyCells = [];\n\n    this.state.forEach((row, rowIndex) => {\n      for (let cellIndex = 0; cellIndex < row.length; cellIndex++) {\n        if (row[cellIndex] === 0) {\n          emptyCells.push([rowIndex, cellIndex]);\n        }\n      }\n    });\n\n    return emptyCells;\n  }\n\n  filterZero(row) {\n    return row.filter((num) => num !== 0);\n  }\n\n  slide(row) {\n    let newRow = this.filterZero(row);\n\n    for (let i = 0; i < newRow.length - 1; i++) {\n      if (newRow[i] === newRow[i + 1]) {\n        newRow[i] *= 2;\n        newRow[i + 1] = 0;\n        this.score += newRow[i];\n      }\n    }\n\n    newRow = this.filterZero(newRow);\n\n    while (newRow.length < this.state.length) {\n      newRow.push(0);\n    }\n\n    return newRow;\n  }\n\n  checkWin() {\n    for (const row of this.state) {\n      if (row.includes(2048)) {\n        this.status = 'win';\n\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  checkLose() {\n    if (this.getEmptyCells().length > 0) {\n      return;\n    }\n\n    for (let r = 0; r < this.state.length; r++) {\n      for (let c = 0; c < this.state[r].length - 1; c++) {\n        if (this.state[r][c] === this.state[r][c + 1]) {\n          return;\n        }\n\n        if (\n          r < this.state.length - 1 &&\n          this.state[r][c] === this.state[r + 1][c]\n        ) {\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","state","map","row","score","status","moveLeft","moved","oldState","JSON","stringify","r","length","slide","addRandomTile","checkWin","checkLose","moveRight","reverse","moveUp","c","moveDown","getScore","getState","getStatus","start","restart","emptyCells","getEmptyCells","cellIndex","Math","floor","random","col","forEach","rowIndex","push","filterZero","filter","num","newRow","i","includes","$09e991522ca7e64e$var$button","document","querySelector","$09e991522ca7e64e$var$score","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$renderGameBoard","rows","querySelectorAll","textContent","cells","cell","value","className","classList","add","addEventListener","e","contains","remove","code"],"version":3,"file":"index.953e0ed4.js.map"}